1. 기본 자료형
숫자, 문자열, 불
- 저장공간 : 스택(stack)


2. 복합자료형
배열, 함수, 객체
- 저장공간 : 힙(heap)

스택 :기본 자료형과 주소 등을 저장하는 메모리 공간
힙 : 복합 자료형을 저장하는 메모리 공간
주소 : 저장된 자료의 위치
레퍼런스 한다. : 스택의 주소가 힙의 자료를 가리키는 것
레퍼런스 변수 : 스택에 저장된 것중에 주소가 저장된 변수

비파괴적 처리와 파괴적 처리
비파괴적처리 : 어떠한 처리 후 원본이 변경되지 않는다.
let a = 10
let b = 20
a + b // 30
a // 10
b // 20

파괴적처리 : 어떠한 처리 후 원본이 변경된다.
let c = [1, 2, 3];
c.push(4) // 4
c // [1, 2, 3, 4]

더하기 연산에 대한 비파과적, 배열에 대한 파괴적 처리
스택에 a, b가 쌓이고 이를 더하기 연산으로 30이란 값이 r이라는 다른 공간에 저장이 된다. 그래서 파괴가 되는 것이 아닌 추가가 된다.

const 상수 값이 변경 안되는 이유
스택에 저장이 되는데 스택 자체에서는 값 변경이 안된다.
하지만 예를 들어 배열의 경우 힙에 저장이 되는데 힙에서는 변경이 가능하다.

// 정리
스택과 힙

저장을 할 때 사용하는 공간
- 스택: 스택스택 쌓는 공간[잘 쌓는 공간]
-> 기본 자료형은 직접!
-> 복합 자료형은 그 주소(address)

- 힙 : 힙힙 던져서 쌓는 공간[대충 큰 것들을 던져서 쌓는 공간]
-> 복합 자료형의 본체가 저장

파괴적 처리 and 비파괴적 처리
처리 후에
- 원본이 변경되었다 -> 파괴적 처리
- 원본이 변경되지 않았다 -> 비파괴적 처리

const 제한
const
-> 스택에 있는 값 변경할 때 오류
-> 힙에 있는 레퍼런스 된 복합 자료형을 조작하는 것에 대해서는 문제 없음
