// 불 : true(참) 또는 false(거짓)
불을 만드는 법: 
1. true를 쳐서 true값을 받거나 false를 쳐서 false값을 받기
2. 비교 연산자 사용 : 
=== : 양 쪽이 같다.
!== : 양쪽이 다르다.
> : 왼쪽이 더 크다.
< : 오른쪽이 더 크다.
>= : 왼쪽이 더 크거나 같다.
<= : 오른쪽이 더 크거나 같다.

// 불 사용 예
조건문인 if(조건) {
  코드 } 

  사용 : 
-> if ( 조건을 여기에 작성 ) { 조건이 참이면 코드 실행 }

// 불 연산자
1. 논리 함 연산자(다음 강의)ㅍ
2. 논리 곱 연산자(다음 강의)
3. 논리 부정 연산자 : '!'뒤에 피연산자로 불을 입력하게 되면 불의 값을 반대로 변경해준다.
- 단항 연산자 : 부호(-, +) 변경 => -10
- 이항 연산자 : 숫자 뺄셈 연산자 => 20 - 10
- 삼항 연산자 

// 피연산자, 연산자
1. 산술 연산자
덧셈 연산자 (+):
let sum = 5 + 3;
// 연산자: +
// 피연산자: 5, 3

나머지 연산자 (%):
let remainder = 7 % 4;
// 연산자: %
// 피연산자: 7, 4

2. 비교 연산자
크다 (>):
let isGreater = 5 > 3;
// 연산자: >
// 피연산자: 5, 3

같다 (===):
let isEqual = (5 === 5);
// 연산자: ===
// 피연산자: 5, 5

3. 논리 연산자
그리고 (&&):
let result = true && false;
// 연산자: &&
// 피연산자: true, false

또는 (||):
let result = true || false;
// 연산자: ||
// 피연산자: true, false

4. 할당 연산자
할당 (=):
let value = 10;
// 연산자: =
// 피연산자: value, 10

5. 단항 연산자
증가 (++):
let count = 1;
count++;
// 연산자: ++
// 피연산자: count

부정 (!):
let isFalse = !true;
// 연산자: !
// 피연산자: true

연산자 (Operator): 연산을 수행하는 기호나 키워드이다.
피연산자 (Operand): 연산자가 작업을 수행하는 대상이다.
연산자는 피연산자를 대상으로 연산을 수행하여 결과를 도출한다.

// 불이 다른 자료형이라도 불로 자동적으로 변환이 된 뒤에 연산이 일어나므로 연산자가 어떤 자료를 연산하는지 생각을 해보면서 이해해야함.